/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::accelerate::*;


#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_errprn(
    __ierr: c_int,
    __info: c_int,
    __form: *mut c_char
) -> c_int
{
    cblas_errprn(
        __ierr,
        __info,
        __form
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_xerbla(
    __p: c_int,
    __rout: *mut c_char,
    __form: *mut c_char
)
{
    cblas_xerbla(
        __p,
        __rout,
        __form
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sdsdot(
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int
) -> f32
{
    cblas_sdsdot(
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsdot(
    __N: c_int,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int
) -> f64
{
    cblas_dsdot(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sdot(
    __N: c_int,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int
) -> f32
{
    cblas_sdot(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ddot(
    __N: c_int,
    __X: *const f64,
    __incX: c_int,
    __Y: *const f64,
    __incY: c_int
) -> f64
{
    cblas_ddot(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cdotu_sub(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __dotu: *mut c_void
)
{
    cblas_cdotu_sub(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __dotu
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cdotc_sub(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __dotc: *mut c_void
)
{
    cblas_cdotc_sub(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __dotc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zdotu_sub(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __dotu: *mut c_void
)
{
    cblas_zdotu_sub(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __dotu
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zdotc_sub(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __dotc: *mut c_void
)
{
    cblas_zdotc_sub(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __dotc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_snrm2(
    __N: c_int,
    __X: *const f32,
    __incX: c_int
) -> f32
{
    cblas_snrm2(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sasum(
    __N: c_int,
    __X: *const f32,
    __incX: c_int
) -> f32
{
    cblas_sasum(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dnrm2(
    __N: c_int,
    __X: *const f64,
    __incX: c_int
) -> f64
{
    cblas_dnrm2(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dasum(
    __N: c_int,
    __X: *const f64,
    __incX: c_int
) -> f64
{
    cblas_dasum(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_scnrm2(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> f32
{
    cblas_scnrm2(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_scasum(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> f32
{
    cblas_scasum(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dznrm2(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> f64
{
    cblas_dznrm2(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dzasum(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> f64
{
    cblas_dzasum(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_isamax(
    __N: c_int,
    __X: *const f32,
    __incX: c_int
) -> c_int
{
    cblas_isamax(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_idamax(
    __N: c_int,
    __X: *const f64,
    __incX: c_int
) -> c_int
{
    cblas_idamax(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_icamax(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> c_int
{
    cblas_icamax(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_izamax(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int
) -> c_int
{
    cblas_izamax(
        __N,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sswap(
    __N: c_int,
    __X: *mut f32,
    __incX: c_int,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_sswap(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_scopy(
    __N: c_int,
    __X: *const f32,
    __incX: c_int,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_scopy(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_saxpy(
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_saxpy(
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dswap(
    __N: c_int,
    __X: *mut f64,
    __incX: c_int,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dswap(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dcopy(
    __N: c_int,
    __X: *const f64,
    __incX: c_int,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dcopy(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_daxpy(
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_daxpy(
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cswap(
    __N: c_int,
    __X: *mut c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_cswap(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ccopy(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_ccopy(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_caxpy(
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_caxpy(
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zswap(
    __N: c_int,
    __X: *mut c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zswap(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zcopy(
    __N: c_int,
    __X: *const c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zcopy(
        __N,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zaxpy(
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zaxpy(
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_srotg(
    __a: *mut f32,
    __b: *mut f32,
    __c: *mut f32,
    __s: *mut f32
)
{
    cblas_srotg(
        __a,
        __b,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_srotmg(
    __d1: *mut f32,
    __d2: *mut f32,
    __b1: *mut f32,
    __b2: f32,
    __P: *mut f32
)
{
    cblas_srotmg(
        __d1,
        __d2,
        __b1,
        __b2,
        __P
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_srot(
    __N: c_int,
    __X: *mut f32,
    __incX: c_int,
    __Y: *mut f32,
    __incY: c_int,
    __c: f32,
    __s: f32
)
{
    cblas_srot(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_srotm(
    __N: c_int,
    __X: *mut f32,
    __incX: c_int,
    __Y: *mut f32,
    __incY: c_int,
    __P: *const f32
)
{
    cblas_srotm(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __P
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_drotg(
    __a: *mut f64,
    __b: *mut f64,
    __c: *mut f64,
    __s: *mut f64
)
{
    cblas_drotg(
        __a,
        __b,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_drotmg(
    __d1: *mut f64,
    __d2: *mut f64,
    __b1: *mut f64,
    __b2: f64,
    __P: *mut f64
)
{
    cblas_drotmg(
        __d1,
        __d2,
        __b1,
        __b2,
        __P
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_drot(
    __N: c_int,
    __X: *mut f64,
    __incX: c_int,
    __Y: *mut f64,
    __incY: c_int,
    __c: f64,
    __s: f64
)
{
    cblas_drot(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_drotm(
    __N: c_int,
    __X: *mut f64,
    __incX: c_int,
    __Y: *mut f64,
    __incY: c_int,
    __P: *const f64
)
{
    cblas_drotm(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __P
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sscal(
    __N: c_int,
    __alpha: f32,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_sscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dscal(
    __N: c_int,
    __alpha: f64,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cscal(
    __N: c_int,
    __alpha: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_cscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zscal(
    __N: c_int,
    __alpha: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_zscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_csscal(
    __N: c_int,
    __alpha: f32,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_csscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zdscal(
    __N: c_int,
    __alpha: f64,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_zdscal(
        __N,
        __alpha,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_crotg(
    __a: *mut c_void,
    __b: *mut c_void,
    __c: *mut c_void,
    __s: *mut c_void
)
{
    cblas_crotg(
        __a,
        __b,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zrotg(
    __a: *mut c_void,
    __b: *mut c_void,
    __c: *mut c_void,
    __s: *mut c_void
)
{
    cblas_zrotg(
        __a,
        __b,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_csrot(
    __N: c_int,
    __X: *mut c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int,
    __c: f32,
    __s: f32
)
{
    cblas_csrot(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zdrot(
    __N: c_int,
    __X: *mut c_void,
    __incX: c_int,
    __Y: *mut c_void,
    __incY: c_int,
    __c: f64,
    __s: f64
)
{
    cblas_zdrot(
        __N,
        __X,
        __incX,
        __Y,
        __incY,
        __c,
        __s
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sgemv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __X: *const f32,
    __incX: c_int,
    __beta: f32,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_sgemv(
        __Order,
        __TransA,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sgbmv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __KL: c_int,
    __KU: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __X: *const f32,
    __incX: c_int,
    __beta: f32,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_sgbmv(
        __Order,
        __TransA,
        __M,
        __N,
        __KL,
        __KU,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_strmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const f32,
    __lda: c_int,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_strmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_stbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const f32,
    __lda: c_int,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_stbmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_stpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const f32,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_stpmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_strsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const f32,
    __lda: c_int,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_strsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_stbsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const f32,
    __lda: c_int,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_stbsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_stpsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const f32,
    __X: *mut f32,
    __incX: c_int
)
{
    cblas_stpsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dgemv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __X: *const f64,
    __incX: c_int,
    __beta: f64,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dgemv(
        __Order,
        __TransA,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dgbmv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __KL: c_int,
    __KU: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __X: *const f64,
    __incX: c_int,
    __beta: f64,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dgbmv(
        __Order,
        __TransA,
        __M,
        __N,
        __KL,
        __KU,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtrmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const f64,
    __lda: c_int,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtrmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const f64,
    __lda: c_int,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtbmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const f64,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtpmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtrsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const f64,
    __lda: c_int,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtrsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtbsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const f64,
    __lda: c_int,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtbsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtpsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const f64,
    __X: *mut f64,
    __incX: c_int
)
{
    cblas_dtpsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cgemv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_cgemv(
        __Order,
        __TransA,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cgbmv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __KL: c_int,
    __KU: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_cgbmv(
        __Order,
        __TransA,
        __M,
        __N,
        __KL,
        __KU,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctrmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctrmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctbmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctpmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctrsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctrsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctbsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctbsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctpsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ctpsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zgemv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zgemv(
        __Order,
        __TransA,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zgbmv(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __KL: c_int,
    __KU: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zgbmv(
        __Order,
        __TransA,
        __M,
        __N,
        __KL,
        __KU,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztrmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztrmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztbmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztpmv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztrsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztrsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztbsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __K: c_int,
    __A: *const c_void,
    __lda: c_int,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztbsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __K,
        __A,
        __lda,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztpsv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __N: c_int,
    __Ap: *const c_void,
    __X: *mut c_void,
    __incX: c_int
)
{
    cblas_ztpsv(
        __Order,
        __Uplo,
        __TransA,
        __Diag,
        __N,
        __Ap,
        __X,
        __incX
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssymv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __X: *const f32,
    __incX: c_int,
    __beta: f32,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_ssymv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __K: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __X: *const f32,
    __incX: c_int,
    __beta: f32,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_ssbmv(
        __Order,
        __Uplo,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sspmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __Ap: *const f32,
    __X: *const f32,
    __incX: c_int,
    __beta: f32,
    __Y: *mut f32,
    __incY: c_int
)
{
    cblas_sspmv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __Ap,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sger(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int,
    __A: *mut f32,
    __lda: c_int
)
{
    cblas_sger(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssyr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __A: *mut f32,
    __lda: c_int
)
{
    cblas_ssyr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sspr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Ap: *mut f32
)
{
    cblas_sspr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Ap
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssyr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int,
    __A: *mut f32,
    __lda: c_int
)
{
    cblas_ssyr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sspr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const f32,
    __incX: c_int,
    __Y: *const f32,
    __incY: c_int,
    __A: *mut f32
)
{
    cblas_sspr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsymv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __X: *const f64,
    __incX: c_int,
    __beta: f64,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dsymv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __K: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __X: *const f64,
    __incX: c_int,
    __beta: f64,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dsbmv(
        __Order,
        __Uplo,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dspmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __Ap: *const f64,
    __X: *const f64,
    __incX: c_int,
    __beta: f64,
    __Y: *mut f64,
    __incY: c_int
)
{
    cblas_dspmv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __Ap,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dger(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __Y: *const f64,
    __incY: c_int,
    __A: *mut f64,
    __lda: c_int
)
{
    cblas_dger(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsyr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __A: *mut f64,
    __lda: c_int
)
{
    cblas_dsyr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dspr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __Ap: *mut f64
)
{
    cblas_dspr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Ap
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsyr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __Y: *const f64,
    __incY: c_int,
    __A: *mut f64,
    __lda: c_int
)
{
    cblas_dsyr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dspr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const f64,
    __incX: c_int,
    __Y: *const f64,
    __incY: c_int,
    __A: *mut f64
)
{
    cblas_dspr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chemv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_chemv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_chbmv(
        __Order,
        __Uplo,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __Ap: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_chpmv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __Ap,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cgeru(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_cgeru(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cgerc(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_cgerc(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cher(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const c_void,
    __incX: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_cher(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chpr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f32,
    __X: *const c_void,
    __incX: c_int,
    __A: *mut c_void
)
{
    cblas_chpr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cher2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_cher2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chpr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __Ap: *mut c_void
)
{
    cblas_chpr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __Ap
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhemv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zhemv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhbmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zhbmv(
        __Order,
        __Uplo,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhpmv(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __Ap: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __beta: *const c_void,
    __Y: *mut c_void,
    __incY: c_int
)
{
    cblas_zhpmv(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __Ap,
        __X,
        __incX,
        __beta,
        __Y,
        __incY
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zgeru(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_zgeru(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zgerc(
    __Order: CBLAS_ORDER,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_zgerc(
        __Order,
        __M,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zher(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const c_void,
    __incX: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_zher(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhpr(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: f64,
    __X: *const c_void,
    __incX: c_int,
    __A: *mut c_void
)
{
    cblas_zhpr(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zher2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __A: *mut c_void,
    __lda: c_int
)
{
    cblas_zher2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __A,
        __lda
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhpr2(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __N: c_int,
    __alpha: *const c_void,
    __X: *const c_void,
    __incX: c_int,
    __Y: *const c_void,
    __incY: c_int,
    __Ap: *mut c_void
)
{
    cblas_zhpr2(
        __Order,
        __Uplo,
        __N,
        __alpha,
        __X,
        __incX,
        __Y,
        __incY,
        __Ap
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_sgemm(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __TransB: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __K: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __B: *const f32,
    __ldb: c_int,
    __beta: f32,
    __C: *mut f32,
    __ldc: c_int
)
{
    cblas_sgemm(
        __Order,
        __TransA,
        __TransB,
        __M,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssymm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __B: *const f32,
    __ldb: c_int,
    __beta: f32,
    __C: *mut f32,
    __ldc: c_int
)
{
    cblas_ssymm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssyrk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __beta: f32,
    __C: *mut f32,
    __ldc: c_int
)
{
    cblas_ssyrk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ssyr2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __B: *const f32,
    __ldb: c_int,
    __beta: f32,
    __C: *mut f32,
    __ldc: c_int
)
{
    cblas_ssyr2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_strmm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __B: *mut f32,
    __ldb: c_int
)
{
    cblas_strmm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_strsm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __B: *mut f32,
    __ldb: c_int
)
{
    cblas_strsm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dgemm(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __TransB: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __K: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __B: *const f64,
    __ldb: c_int,
    __beta: f64,
    __C: *mut f64,
    __ldc: c_int
)
{
    cblas_dgemm(
        __Order,
        __TransA,
        __TransB,
        __M,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsymm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __B: *const f64,
    __ldb: c_int,
    __beta: f64,
    __C: *mut f64,
    __ldc: c_int
)
{
    cblas_dsymm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsyrk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __beta: f64,
    __C: *mut f64,
    __ldc: c_int
)
{
    cblas_dsyrk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dsyr2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __B: *const f64,
    __ldb: c_int,
    __beta: f64,
    __C: *mut f64,
    __ldc: c_int
)
{
    cblas_dsyr2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtrmm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __B: *mut f64,
    __ldb: c_int
)
{
    cblas_dtrmm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_dtrsm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __B: *mut f64,
    __ldb: c_int
)
{
    cblas_dtrsm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cgemm(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __TransB: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_cgemm(
        __Order,
        __TransA,
        __TransB,
        __M,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_csymm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_csymm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_csyrk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_csyrk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_csyr2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_csyr2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctrmm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *mut c_void,
    __ldb: c_int
)
{
    cblas_ctrmm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ctrsm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *mut c_void,
    __ldb: c_int
)
{
    cblas_ctrsm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zgemm(
    __Order: CBLAS_ORDER,
    __TransA: CBLAS_TRANSPOSE,
    __TransB: CBLAS_TRANSPOSE,
    __M: c_int,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zgemm(
        __Order,
        __TransA,
        __TransB,
        __M,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zsymm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zsymm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zsyrk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zsyrk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zsyr2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zsyr2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztrmm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *mut c_void,
    __ldb: c_int
)
{
    cblas_ztrmm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_ztrsm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __TransA: CBLAS_TRANSPOSE,
    __Diag: CBLAS_DIAG,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *mut c_void,
    __ldb: c_int
)
{
    cblas_ztrsm(
        __Order,
        __Side,
        __Uplo,
        __TransA,
        __Diag,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_chemm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_chemm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cherk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f32,
    __A: *const c_void,
    __lda: c_int,
    __beta: f32,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_cherk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_cher2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: f32,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_cher2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zhemm(
    __Order: CBLAS_ORDER,
    __Side: CBLAS_SIDE,
    __Uplo: CBLAS_UPLO,
    __M: c_int,
    __N: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: *const c_void,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zhemm(
        __Order,
        __Side,
        __Uplo,
        __M,
        __N,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zherk(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: f64,
    __A: *const c_void,
    __lda: c_int,
    __beta: f64,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zherk(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_cblas_zher2k(
    __Order: CBLAS_ORDER,
    __Uplo: CBLAS_UPLO,
    __Trans: CBLAS_TRANSPOSE,
    __N: c_int,
    __K: c_int,
    __alpha: *const c_void,
    __A: *const c_void,
    __lda: c_int,
    __B: *const c_void,
    __ldb: c_int,
    __beta: f64,
    __C: *mut c_void,
    __ldc: c_int
)
{
    cblas_zher2k(
        __Order,
        __Uplo,
        __Trans,
        __N,
        __K,
        __alpha,
        __A,
        __lda,
        __B,
        __ldb,
        __beta,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_appleblas_sgeadd(
    __order: CBLAS_ORDER,
    __transA: CBLAS_TRANSPOSE,
    __transB: CBLAS_TRANSPOSE,
    __m: c_int,
    __n: c_int,
    __alpha: f32,
    __A: *const f32,
    __lda: c_int,
    __beta: f32,
    __B: *const f32,
    __ldb: c_int,
    __C: *mut f32,
    __ldc: c_int
)
{
    appleblas_sgeadd(
        __order,
        __transA,
        __transB,
        __m,
        __n,
        __alpha,
        __A,
        __lda,
        __beta,
        __B,
        __ldb,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_appleblas_dgeadd(
    __order: CBLAS_ORDER,
    __transA: CBLAS_TRANSPOSE,
    __transB: CBLAS_TRANSPOSE,
    __m: c_int,
    __n: c_int,
    __alpha: f64,
    __A: *const f64,
    __lda: c_int,
    __beta: f64,
    __B: *const f64,
    __ldb: c_int,
    __C: *mut f64,
    __ldc: c_int
)
{
    appleblas_dgeadd(
        __order,
        __transA,
        __transB,
        __m,
        __n,
        __alpha,
        __A,
        __lda,
        __beta,
        __B,
        __ldb,
        __C,
        __ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_inner_product_dense_float(
    nz: sparse_dimension,
    x: *const f32,
    indx: *const sparse_index,
    y: *const f32,
    incy: sparse_stride
) -> f32
{
    sparse_inner_product_dense_float(
        nz,
        x,
        indx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_inner_product_dense_double(
    nz: sparse_dimension,
    x: *const f64,
    indx: *const sparse_index,
    y: *const f64,
    incy: sparse_stride
) -> f64
{
    sparse_inner_product_dense_double(
        nz,
        x,
        indx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_inner_product_sparse_float(
    nzx: sparse_dimension,
    nzy: sparse_dimension,
    x: *const f32,
    indx: *const sparse_index,
    y: *const f32,
    indy: *const sparse_index
) -> f32
{
    sparse_inner_product_sparse_float(
        nzx,
        nzy,
        x,
        indx,
        y,
        indy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_inner_product_sparse_double(
    nzx: sparse_dimension,
    nzy: sparse_dimension,
    x: *const f64,
    indx: *const sparse_index,
    y: *const f64,
    indy: *const sparse_index
) -> f64
{
    sparse_inner_product_sparse_double(
        nzx,
        nzy,
        x,
        indx,
        y,
        indy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_add_with_scale_dense_float(
    nz: sparse_dimension,
    alpha: f32,
    x: *const f32,
    indx: *const sparse_index,
    y: *mut f32,
    incy: sparse_stride
)
{
    sparse_vector_add_with_scale_dense_float(
        nz,
        alpha,
        x,
        indx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_add_with_scale_dense_double(
    nz: sparse_dimension,
    alpha: f64,
    x: *const f64,
    indx: *const sparse_index,
    y: *mut f64,
    incy: sparse_stride
)
{
    sparse_vector_add_with_scale_dense_double(
        nz,
        alpha,
        x,
        indx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_norm_float(
    nz: sparse_dimension,
    x: *const f32,
    indx: *const sparse_index,
    norm: sparse_norm
) -> f32
{
    sparse_vector_norm_float(
        nz,
        x,
        indx,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_norm_double(
    nz: sparse_dimension,
    x: *const f64,
    indx: *const sparse_index,
    norm: sparse_norm
) -> f64
{
    sparse_vector_norm_double(
        nz,
        x,
        indx,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_vector_product_dense_float(
    transa: CBLAS_TRANSPOSE,
    alpha: f32,
    A: sparse_matrix_float,
    x: *const f32,
    incx: sparse_stride,
    y: *mut f32,
    incy: sparse_stride
) -> sparse_status
{
    sparse_matrix_vector_product_dense_float(
        transa,
        alpha,
        A,
        x,
        incx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_vector_product_dense_double(
    transa: CBLAS_TRANSPOSE,
    alpha: f64,
    A: sparse_matrix_double,
    x: *const f64,
    incx: sparse_stride,
    y: *mut f64,
    incy: sparse_stride
) -> sparse_status
{
    sparse_matrix_vector_product_dense_double(
        transa,
        alpha,
        A,
        x,
        incx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_triangular_solve_dense_float(
    transt: CBLAS_TRANSPOSE,
    alpha: f32,
    T: sparse_matrix_float,
    x: *mut f32,
    incx: sparse_stride
) -> sparse_status
{
    sparse_vector_triangular_solve_dense_float(
        transt,
        alpha,
        T,
        x,
        incx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_vector_triangular_solve_dense_double(
    transt: CBLAS_TRANSPOSE,
    alpha: f64,
    T: sparse_matrix_double,
    x: *mut f64,
    incx: sparse_stride
) -> sparse_status
{
    sparse_vector_triangular_solve_dense_double(
        transt,
        alpha,
        T,
        x,
        incx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_outer_product_dense_float(
    M: sparse_dimension,
    N: sparse_dimension,
    nz: sparse_dimension,
    alpha: f32,
    x: *const f32,
    incx: sparse_stride,
    y: *const f32,
    indy: *const sparse_index,
    C: *mut sparse_matrix_float
) -> sparse_status
{
    sparse_outer_product_dense_float(
        M,
        N,
        nz,
        alpha,
        x,
        incx,
        y,
        indy,
        C
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_outer_product_dense_double(
    M: sparse_dimension,
    N: sparse_dimension,
    nz: sparse_dimension,
    alpha: f64,
    x: *const f64,
    incx: sparse_stride,
    y: *const f64,
    indy: *const sparse_index,
    C: *mut sparse_matrix_double
) -> sparse_status
{
    sparse_outer_product_dense_double(
        M,
        N,
        nz,
        alpha,
        x,
        incx,
        y,
        indy,
        C
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_permute_rows_float(
    A: sparse_matrix_float,
    perm: *const sparse_index
) -> sparse_status
{
    sparse_permute_rows_float(
        A,
        perm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_permute_rows_double(
    A: sparse_matrix_double,
    perm: *const sparse_index
) -> sparse_status
{
    sparse_permute_rows_double(
        A,
        perm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_permute_cols_float(
    A: sparse_matrix_float,
    perm: *const sparse_index
) -> sparse_status
{
    sparse_permute_cols_float(
        A,
        perm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_permute_cols_double(
    A: sparse_matrix_double,
    perm: *const sparse_index
) -> sparse_status
{
    sparse_permute_cols_double(
        A,
        perm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_elementwise_norm_float(
    A: sparse_matrix_float,
    norm: sparse_norm
) -> f32
{
    sparse_elementwise_norm_float(
        A,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_elementwise_norm_double(
    A: sparse_matrix_double,
    norm: sparse_norm
) -> f64
{
    sparse_elementwise_norm_double(
        A,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_operator_norm_float(
    A: sparse_matrix_float,
    norm: sparse_norm
) -> f32
{
    sparse_operator_norm_float(
        A,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_operator_norm_double(
    A: sparse_matrix_double,
    norm: sparse_norm
) -> f64
{
    sparse_operator_norm_double(
        A,
        norm
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_trace_float(
    A: sparse_matrix_float,
    offset: sparse_index
) -> f32
{
    sparse_matrix_trace_float(
        A,
        offset
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_trace_double(
    A: sparse_matrix_double,
    offset: sparse_index
) -> f64
{
    sparse_matrix_trace_double(
        A,
        offset
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_product_dense_float(
    order: CBLAS_ORDER,
    transa: CBLAS_TRANSPOSE,
    n: sparse_dimension,
    alpha: f32,
    A: sparse_matrix_float,
    B: *const f32,
    ldb: sparse_dimension,
    C: *mut f32,
    ldc: sparse_dimension
) -> sparse_status
{
    sparse_matrix_product_dense_float(
        order,
        transa,
        n,
        alpha,
        A,
        B,
        ldb,
        C,
        ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_product_dense_double(
    order: CBLAS_ORDER,
    transa: CBLAS_TRANSPOSE,
    n: sparse_dimension,
    alpha: f64,
    A: sparse_matrix_double,
    B: *const f64,
    ldb: sparse_dimension,
    C: *mut f64,
    ldc: sparse_dimension
) -> sparse_status
{
    sparse_matrix_product_dense_double(
        order,
        transa,
        n,
        alpha,
        A,
        B,
        ldb,
        C,
        ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_product_sparse_float(
    order: CBLAS_ORDER,
    transa: CBLAS_TRANSPOSE,
    alpha: f32,
    A: sparse_matrix_float,
    B: sparse_matrix_float,
    C: *mut f32,
    ldc: sparse_dimension
) -> sparse_status
{
    sparse_matrix_product_sparse_float(
        order,
        transa,
        alpha,
        A,
        B,
        C,
        ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_product_sparse_double(
    order: CBLAS_ORDER,
    transa: CBLAS_TRANSPOSE,
    alpha: f64,
    A: sparse_matrix_double,
    B: sparse_matrix_double,
    C: *mut f64,
    ldc: sparse_dimension
) -> sparse_status
{
    sparse_matrix_product_sparse_double(
        order,
        transa,
        alpha,
        A,
        B,
        C,
        ldc
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_triangular_solve_dense_float(
    order: CBLAS_ORDER,
    transt: CBLAS_TRANSPOSE,
    nrhs: sparse_dimension,
    alpha: f32,
    T: sparse_matrix_float,
    B: *mut f32,
    ldb: sparse_dimension
) -> sparse_status
{
    sparse_matrix_triangular_solve_dense_float(
        order,
        transt,
        nrhs,
        alpha,
        T,
        B,
        ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_triangular_solve_dense_double(
    order: CBLAS_ORDER,
    transt: CBLAS_TRANSPOSE,
    nrhs: sparse_dimension,
    alpha: f64,
    T: sparse_matrix_double,
    B: *mut f64,
    ldb: sparse_dimension
) -> sparse_status
{
    sparse_matrix_triangular_solve_dense_double(
        order,
        transt,
        nrhs,
        alpha,
        T,
        B,
        ldb
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_create_float(
    M: sparse_dimension,
    N: sparse_dimension
) -> sparse_matrix_float
{
    sparse_matrix_create_float(
        M,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_create_double(
    M: sparse_dimension,
    N: sparse_dimension
) -> sparse_matrix_double
{
    sparse_matrix_create_double(
        M,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_entry_float(
    A: sparse_matrix_float,
    val: f32,
    i: sparse_index,
    j: sparse_index
) -> sparse_status
{
    sparse_insert_entry_float(
        A,
        val,
        i,
        j
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_entry_double(
    A: sparse_matrix_double,
    val: f64,
    i: sparse_index,
    j: sparse_index
) -> sparse_status
{
    sparse_insert_entry_double(
        A,
        val,
        i,
        j
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_entries_float(
    A: sparse_matrix_float,
    N: sparse_dimension,
    val: *const f32,
    indx: *const sparse_index,
    jndx: *const sparse_index
) -> sparse_status
{
    sparse_insert_entries_float(
        A,
        N,
        val,
        indx,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_entries_double(
    A: sparse_matrix_double,
    N: sparse_dimension,
    val: *const f64,
    indx: *const sparse_index,
    jndx: *const sparse_index
) -> sparse_status
{
    sparse_insert_entries_double(
        A,
        N,
        val,
        indx,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_col_float(
    A: sparse_matrix_float,
    j: sparse_index,
    nz: sparse_dimension,
    val: *const f32,
    indx: *const sparse_index
) -> sparse_status
{
    sparse_insert_col_float(
        A,
        j,
        nz,
        val,
        indx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_col_double(
    A: sparse_matrix_double,
    j: sparse_index,
    nz: sparse_dimension,
    val: *const f64,
    indx: *const sparse_index
) -> sparse_status
{
    sparse_insert_col_double(
        A,
        j,
        nz,
        val,
        indx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_row_float(
    A: sparse_matrix_float,
    i: sparse_index,
    nz: sparse_dimension,
    val: *const f32,
    jndx: *const sparse_index
) -> sparse_status
{
    sparse_insert_row_float(
        A,
        i,
        nz,
        val,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_row_double(
    A: sparse_matrix_double,
    i: sparse_index,
    nz: sparse_dimension,
    val: *const f64,
    jndx: *const sparse_index
) -> sparse_status
{
    sparse_insert_row_double(
        A,
        i,
        nz,
        val,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_sparse_row_float(
    A: sparse_matrix_float,
    row: sparse_index,
    column_start: sparse_index,
    column_end: *mut sparse_index,
    nz: sparse_dimension,
    val: *mut f32,
    jndx: *mut sparse_index
) -> sparse_status
{
    sparse_extract_sparse_row_float(
        A,
        row,
        column_start,
        column_end,
        nz,
        val,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_sparse_row_double(
    A: sparse_matrix_double,
    row: sparse_index,
    column_start: sparse_index,
    column_end: *mut sparse_index,
    nz: sparse_dimension,
    val: *mut f64,
    jndx: *mut sparse_index
) -> sparse_status
{
    sparse_extract_sparse_row_double(
        A,
        row,
        column_start,
        column_end,
        nz,
        val,
        jndx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_sparse_column_float(
    A: sparse_matrix_float,
    column: sparse_index,
    row_start: sparse_index,
    row_end: *mut sparse_index,
    nz: sparse_dimension,
    val: *mut f32,
    indx: *mut sparse_index
) -> sparse_status
{
    sparse_extract_sparse_column_float(
        A,
        column,
        row_start,
        row_end,
        nz,
        val,
        indx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_sparse_column_double(
    A: sparse_matrix_double,
    column: sparse_index,
    row_start: sparse_index,
    row_end: *mut sparse_index,
    nz: sparse_dimension,
    val: *mut f64,
    indx: *mut sparse_index
) -> sparse_status
{
    sparse_extract_sparse_column_double(
        A,
        column,
        row_start,
        row_end,
        nz,
        val,
        indx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_block_create_float(
    Mb: sparse_dimension,
    Nb: sparse_dimension,
    k: sparse_dimension,
    l: sparse_dimension
) -> sparse_matrix_float
{
    sparse_matrix_block_create_float(
        Mb,
        Nb,
        k,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_block_create_double(
    Mb: sparse_dimension,
    Nb: sparse_dimension,
    k: sparse_dimension,
    l: sparse_dimension
) -> sparse_matrix_double
{
    sparse_matrix_block_create_double(
        Mb,
        Nb,
        k,
        l
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_variable_block_create_float(
    Mb: sparse_dimension,
    Nb: sparse_dimension,
    K: *const sparse_dimension,
    L: *const sparse_dimension
) -> sparse_matrix_float
{
    sparse_matrix_variable_block_create_float(
        Mb,
        Nb,
        K,
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_variable_block_create_double(
    Mb: sparse_dimension,
    Nb: sparse_dimension,
    K: *const sparse_dimension,
    L: *const sparse_dimension
) -> sparse_matrix_double
{
    sparse_matrix_variable_block_create_double(
        Mb,
        Nb,
        K,
        L
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_block_float(
    A: sparse_matrix_float,
    val: *const f32,
    row_stride: sparse_dimension,
    col_stride: sparse_dimension,
    bi: sparse_index,
    bj: sparse_index
) -> sparse_status
{
    sparse_insert_block_float(
        A,
        val,
        row_stride,
        col_stride,
        bi,
        bj
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_insert_block_double(
    A: sparse_matrix_double,
    val: *const f64,
    row_stride: sparse_dimension,
    col_stride: sparse_dimension,
    bi: sparse_index,
    bj: sparse_index
) -> sparse_status
{
    sparse_insert_block_double(
        A,
        val,
        row_stride,
        col_stride,
        bi,
        bj
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_block_float(
    A: sparse_matrix_float,
    bi: sparse_index,
    bj: sparse_index,
    row_stride: sparse_dimension,
    col_stride: sparse_dimension,
    val: *mut f32
) -> sparse_status
{
    sparse_extract_block_float(
        A,
        bi,
        bj,
        row_stride,
        col_stride,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_extract_block_double(
    A: sparse_matrix_double,
    bi: sparse_index,
    bj: sparse_index,
    row_stride: sparse_dimension,
    col_stride: sparse_dimension,
    val: *mut f64
) -> sparse_status
{
    sparse_extract_block_double(
        A,
        bi,
        bj,
        row_stride,
        col_stride,
        val
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_block_dimension_for_row(
    A: *mut c_void,
    i: sparse_index
) -> c_long
{
    sparse_get_block_dimension_for_row(
        A,
        i
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_block_dimension_for_col(
    A: *mut c_void,
    j: sparse_index
) -> c_long
{
    sparse_get_block_dimension_for_col(
        A,
        j
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_commit(
    A: *mut c_void
) -> sparse_status
{
    sparse_commit(
        A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_property(
    A: *mut c_void,
    pname: sparse_matrix_property
) -> c_long
{
    sparse_get_matrix_property(
        A,
        pname
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_set_matrix_property(
    A: *mut c_void,
    pname: sparse_matrix_property
) -> sparse_status
{
    sparse_set_matrix_property(
        A,
        pname
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_number_of_rows(
    A: *mut c_void
) -> sparse_dimension
{
    sparse_get_matrix_number_of_rows(
        A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_number_of_columns(
    A: *mut c_void
) -> sparse_dimension
{
    sparse_get_matrix_number_of_columns(
        A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_nonzero_count(
    A: *mut c_void
) -> c_long
{
    sparse_get_matrix_nonzero_count(
        A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_nonzero_count_for_row(
    A: *mut c_void,
    i: sparse_index
) -> c_long
{
    sparse_get_matrix_nonzero_count_for_row(
        A,
        i
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_matrix_nonzero_count_for_column(
    A: *mut c_void,
    j: sparse_index
) -> c_long
{
    sparse_get_matrix_nonzero_count_for_column(
        A,
        j
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_matrix_destroy(
    A: *mut c_void
) -> sparse_status
{
    sparse_matrix_destroy(
        A
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_vector_nonzero_count_float(
    N: sparse_dimension,
    x: *const f32,
    incx: sparse_stride
) -> c_long
{
    sparse_get_vector_nonzero_count_float(
        N,
        x,
        incx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_get_vector_nonzero_count_double(
    N: sparse_dimension,
    x: *const f64,
    incx: sparse_stride
) -> c_long
{
    sparse_get_vector_nonzero_count_double(
        N,
        x,
        incx
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_pack_vector_float(
    N: sparse_dimension,
    nz: sparse_dimension,
    x: *const f32,
    incx: sparse_stride,
    y: *mut f32,
    indy: *mut sparse_index
) -> c_long
{
    sparse_pack_vector_float(
        N,
        nz,
        x,
        incx,
        y,
        indy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_pack_vector_double(
    N: sparse_dimension,
    nz: sparse_dimension,
    x: *const f64,
    incx: sparse_stride,
    y: *mut f64,
    indy: *mut sparse_index
) -> c_long
{
    sparse_pack_vector_double(
        N,
        nz,
        x,
        incx,
        y,
        indy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_unpack_vector_float(
    N: sparse_dimension,
    nz: sparse_dimension,
    zero: bool,
    x: *const f32,
    indx: *const sparse_index,
    y: *mut f32,
    incy: sparse_stride
)
{
    sparse_unpack_vector_float(
        N,
        nz,
        zero,
        x,
        indx,
        y,
        incy
    )
}

#[no_mangle]
pub unsafe extern "C" fn ffi_sparse_unpack_vector_double(
    N: sparse_dimension,
    nz: sparse_dimension,
    zero: bool,
    x: *const f64,
    indx: *const sparse_index,
    y: *mut f64,
    incy: sparse_stride
)
{
    sparse_unpack_vector_double(
        N,
        nz,
        zero,
        x,
        indx,
        y,
        incy
    )
}

    